% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_clinic.R
\name{create_clinic}
\alias{create_clinic}
\title{Create a New Clinic Package}
\usage{
create_clinic(
  path,
  fields = list(),
  rstudio = rstudioapi::isAvailable(),
  roxygen = TRUE,
  check_name = TRUE,
  open = rlang::is_interactive(),
  sessions = list()
)
}
\arguments{
\item{path}{A path. If it exists, it is used. If it does not exist, it is
created, provided that the parent path exists.}

\item{fields}{A named list of fields to add to \code{DESCRIPTION}, potentially
overriding default values. See \code{\link[usethis:use_description]{use_description()}} for how you can set
personalized defaults using package options.}

\item{rstudio}{If \code{TRUE}, calls \code{\link[usethis:use_rstudio]{use_rstudio()}} to make the new package or
project into an \href{https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects}{RStudio Project}.
If \code{FALSE} and a non-package project, a sentinel \code{.here} file is placed so
that the directory can be recognized as a project by the
\href{https://here.r-lib.org}{here} or
\href{https://rprojroot.r-lib.org}{rprojroot} packages.}

\item{roxygen}{Do you plan to use roxygen2 to document your package?}

\item{check_name}{Whether to check if the name is valid for CRAN and throw an
error if not.}

\item{open}{If \code{TRUE}, \link[usethis:proj_activate]{activates} the new project:
\itemize{
\item If RStudio desktop, the package is opened in a new session.
\item If on RStudio server, the current RStudio project is activated.
\item Otherwise, the working directory and active project is changed.
}}

\item{sessions}{named list-of-lists; each entry name corresponds to a session
shorthand title, with the entry list corresponding to the arguments to
\code{\link[=create_session]{create_session()}}.}
}
\description{
Creates a new ICI3D style clinic package
}
\details{
This function extends \code{\link[usethis:create_package]{usethis::create_package()}} to reflect the
ICI3D-style clinic package approach to learning materials:
\itemize{
\item Clinic packages typically include some traditional R code for export, i.e.
the package is used a bit like a conventional package.
\item The packages also include scripts and/or tutorials, which clinic
participants use during practical exercises, homework, etc.
}

The organizing structure is the list of "sessions" - the shorthand titles
for the scripts and/or tutorials. This package builds directory and files
consistent with this structure, as well as R code. Imagine your clinic has
two sessions, "intro" and "advanced", and you use this function to create
a new clinic package. You should then find yourself with the following in
the package directory:

\if{html}{\out{<div class="sourceCode">}}\preformatted{DESCRIPTION
NAMESPACE
data/
data-raw/
man/
R/
  aaa_internal.R
  advanced_data.R
  advanced_functions.R
  advanced_plotting.R
  checks.R
  intro_data.R
  intro_functions.R
  intro_plotting.R
  plotting.R
  utilities.R
inst/
  scripts/                   # ... if the sessions have practicals
    advanced/Step_00.R
    intro/Step_00.R
    solutions/
      advanced/Step_00.R
      intro/Step_00.R
  tutorials/                 # ... if the sessions have tutorials
    advanced/advanced.Rmd
    intro/intro.Rmd
}\if{html}{\out{</div>}}

At the top level, there are the typical elements ()

A clinic package's R code is intended for use with the scripts and/or
tutorials: it eliminates coding that isn't pertinent to the learning (e.g.
munging data, complicated plots, sophisticated analytical steps that
represent assumed prior learnings).
}
